package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"
	"wireman/graph/model"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: CreateArticle - createArticle"))
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context) ([]*model.Article, error) {
	var arr []*model.Article
	currentTime := time.Now()
	article1 := &model.Article{
		Title:   "นางแบกเพื่อไทย ตระบัดสัตย์ ไม่แคร์ เลือกผลประโยชน์ ช่าวเน็ตลั่น 'จะไปสุดที่ตรงไหน'",
		ID:      "T1",
		Type:    model.ArticleStyleGreenViper,
		Date:    currentTime.String(),
		Caption: "พรรคประชาธิปัตย์มีมติเอกฉันท์ 34 เสียง เข้าร่วมรัฐบาลเพื่อไทย",
		Link:    "https://www.youtube.com/watch?si=7_HhjpeTeqmystp0&v=-ZC5Y8heDPk&feature=youtu.be",
	}
	article2 := &model.Article{
		Title:   "ครั้งแรกประวัติศาสตร์ สว.ไทย 'เลือกกันเอง'",
		ID:      "T2",
		Type:    model.ArticleStyleMediumVioletRed,
		Date:    currentTime.String(),
		Caption: "คนไทยอึ้ง แบบนี้ก็ได้หรอ",
		Link:    "https://www.thaipbs.or.th/news/content/337938",
	}

	return append(arr, article1, article2), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
